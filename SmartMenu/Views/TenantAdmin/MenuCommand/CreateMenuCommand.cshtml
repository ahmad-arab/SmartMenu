@model SmartMenu.Models.MenuCommand.CreateMenuCommandViewModel
@{
    Layout = null;
    var menuId = Model.MenuId;
}

<div class="container-fluid">
    <form asp-action="CreateMenuCommand" asp-route-menuId="@menuId" method="post" id="createMenuCommandForm">
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.MenuId)

        <div class="row">
            <div class="col-12 mb-3">
                <label class="form-label fw-bold">Select Icon</label>
                @await Component.InvokeAsync("IconSelector", new {
                    name = "Icon",
                    selected = Model.Icon,
                    isRequired = true
                    })
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <label asp-for="@Model.SystemMessage" class="form-label">Message</label>
                <textarea asp-for="@Model.SystemMessage" class="form-control"></textarea>
                <span asp-validation-for="@Model.SystemMessage" class="text-danger"></span>
            </div>
            <div class="col-md-6 mb-3">
                <div class="form-check mt-4">
                    <input asp-for="HasCustomerMessage" class="form-check-input" type="checkbox" />
                    <label asp-for="HasCustomerMessage" class="form-check-label">Has Customer Message</label>
                    <span asp-validation-for="HasCustomerMessage" class="text-danger"></span>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12 mb-3">
                <label class="form-label fw-bold">Send to Staff</label>
                <select asp-for="SelectedStaffIds" class="form-select" multiple size="6">
                    @foreach (var s in Model.AvailableStaff)
                    {
                        <option value="@s.Id">@s.Name (@s.PhoneNumber)</option>
                    }
                </select>
                <small class="text-muted">Hold Ctrl/Cmd to select multiple staff.</small>
            </div>
        </div>

        <hr />
        <h5>Command Texts</h5>
        <div class="row">
            @for (int i = 0; i < Model.Texts.Count; i++)
            {
                var lang = Model.AvailableLanguages?.FirstOrDefault(l => l.Id == Model.Texts[i].LanguageId);
                <div class="col-md-6 col-lg-4 mb-3 mx-3 border rounded p-2">
                    <div class="mb-2">
                        <span class="fw-bold">@lang?.Name</span>
                        @if (lang?.IsRtl == true)
                        {
                            <span class="badge bg-secondary">RTL</span>
                        }
                    </div>
                    <div class="mb-2">
                        <label asp-for="@Model.Texts[i].Text" class="form-label">Title</label>
                        <input asp-for="@Model.Texts[i].Text" class="form-control" />
                        <span asp-validation-for="@Model.Texts[i].Text" class="text-danger"></span>
                    </div>
                    <input type="hidden" asp-for="@Model.Texts[i].LanguageId" />
                </div>
            }
        </div>
        <div class="d-grid">
            <button type="submit" class="btn btn-primary">Create Command</button>
        </div>
    </form>
</div>

<partial name="_ValidationScriptsPartial" />

<script>
    function initSelects($root) {
        var $staff = ($root || $(document)).find('#SelectedStaffIds');
        if ($.fn.select2 && $staff.length) {
            $staff.select2({
                allowClear: true,
                closeOnSelect: false,
                width: '100%',
                dropdownParent: $('#dynamicModal'), // important inside Bootstrap modal
                minimumResultsForSearch: Infinity   // hide search if not needed
            });
        }
    }

    // Init when loaded into the Bootstrap modal via ModalManager
    $(document).on('modal:content-ready', function (e, $content) {
        initSelects($content);
    });
</script>